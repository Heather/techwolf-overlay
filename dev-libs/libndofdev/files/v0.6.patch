From d2bef017db4fa379f00bf1213a8361c2cae4bdcf Mon Sep 17 00:00:00 2001
From: Jan Ciger <jan.ciger@gmail.com>
Date: Mon, 20 Oct 2014 23:23:39 +0200
Subject: [PATCH] 0.6 patch from Ricky Curtice     - untested support for more
 devices     - dynamic determination of the number of axes     - cleanups

---
 CHANGELOG |  7 +++++++
 README.md | 27 ++++++++++++++++++++++-----
 ndofdev.c | 63 ++++++++++++++++++++++++++++++++++++++++++++++++++++-----------
 3 files changed, 81 insertions(+), 16 deletions(-)

diff --git a/CHANGELOG b/CHANGELOG
index a9edf82..04e75af 100644
--- a/CHANGELOG
+++ b/CHANGELOG
@@ -1,3 +1,10 @@
+2014-10-20  Jan Ciger <jan.ciger (at) gmail.com>
+        * 0.6
+            - merged patch from Ricky Curtice (http://rwcproductions.com/) 
+                - untested support for more devices
+                - dynamic determination of the number of axes 
+                - cleanups
+
 2014-04-12  Jan Ciger  <jan.ciger (at) gmail.com>
         * 0.5 
             - added support for 3Dconnexion SpaceMouse Pro & increased number of supported buttons to 32 (thanks to David Seikel)
diff --git a/README.md b/README.md
index 55af771..8f33e9c 100644
--- a/README.md
+++ b/README.md
@@ -5,12 +5,29 @@ Linux support for the 3Dconnexion SpaceBall, SpaceNavigator and joysticks in the
 
 Currently supported are the following devices (VID:PID):
 
-  * 0x046d:0xc626   3Dconnexion SpaceNavigator
-  * 0x046d:0xc621   3Dconnexion SpaceBall 5000
-  * 0x046d:0xc623   3Dconnexion SpaceTraveller (untested)
   * 0x046d:0xc603   3Dconnexion SpaceMouse (untested)
-  * 0x046d:0xc627   3Dconnexion SpaceExplorer (untested - from Armin Weatherwax <Armin.Weatherwax (at) gmail.com>)
-  * 0x046d:0xc62b   3Dconnexion SpaceMouse Pro (untested - from David Seikel < http://onefang.net/ >
+  * 0x046d:0xc605   CADMan (untested) 
+  * 0x046d:0xc606   SpaceMouse Classic (untested)
+  * 0x046d:0xc621   SpaceBall 5000 (tested, works)
+  * 0x046d:0xc623   SpaceTraveller (untested)
+  * 0x046d:0xc625   SpacePilot (untested)
+  * 0x046d:0xc626   SpaceNavigator (tested, works)
+  * 0x046d:0xc627   SpaceExplorer (untested - from Armin Weatherwax <Armin.Weatherwax (at) gmail.com>)
+  * 0x046d:0xc628   SpaceNavigator for Notebooks (untested) 
+  * 0x046d:0xc629   SpacePilot Pro (untested)
+  * 0x046d:0xc62b   SpaceMouse Pro (untested - from David Seikel < http://onefang.net/ >
+
+  * 0x256f:0xc62e   SpaceMouse Wireless (cable) (untested)
+  * 0x256f:0xc62f   SpaceMouse Wireless (receiver) (untested)
+  * 0x256f:0xc631   SpaceMouse Wireless (untested)
+  * 0x256f:0xc632   SpaceMouse Pro Wireless (untested)
+
+The following devices were contributed by Ricky Curtice (http://rwcproductions.com/):
+(https://bitbucket.org/lindenlab/3p-libndofdev-linux/pull-request/1/open-277-linux-support-for-spacemousepro/diff)
+
+CADMan, all SpaceMice (classic & wireless) except SpaceMouse Pro (non-wireless), SpaceNavigator for Notebooks
+
+The devices marked as "untested" are expected to work and their VID:PIDs were sent to me by external contributors. I haven't tested them personally because I don't have that hardware, they could work, could be completely broken or anything inbetween. Caveat emptor. However, please do report any working or not working devices from the list above - that's only way to get the problems fixed.
 
 In addition, the library supports every joystick/gamepad device supported by the SDL library.
 
diff --git a/ndofdev.c b/ndofdev.c
index c9bfe11..0b0a858 100644
--- a/ndofdev.c
+++ b/ndofdev.c
@@ -34,6 +34,7 @@
     * Evdev could be used for joysticks as well, but higher level logic would have to be
     * re-implemented (calibration, filtering, etc.) - SDL includes it already.
     *
+    * Release 0.6
 */
 
 #include <linux/input.h>
@@ -94,13 +95,32 @@ int ndof_init_first(NDOF_Device *in_out_dev, void *param)
         if (fd > 0)
         {
             ioctl(fd, EVIOCGID, &ID);        // get device ID
-            if ((ID.vendor == 0x046d) &&
-                    ((ID.product == 0xc626) || // SpaceNavigators
-                     (ID.product == 0xc621) || // SpaceBall 5000 
-                     (ID.product == 0xc62b) || // SpaceMousePro 
-                     (ID.product == 0xc627) || // SpaceExplorer (untested)
-                     (ID.product == 0xc623) || // SpaceTraveler (untested)
-                     (ID.product == 0xc603)))  // SpaceMouse (untested)
+            if (                            // For a nice list see http://spacemice.org/index.php?title=Dev
+                ((ID.vendor == 0x046d) && // Logitech's Vendor ID, used by 3DConnexion until they got their own.
+                    (
+                        (ID.product == 0xc603) || // SpaceMouse (untested)
+                        (ID.product == 0xc605) || // CADMan (untested)
+                        (ID.product == 0xc606) || // SpaceMouse Classic (untested)
+                        (ID.product == 0xc621) || // SpaceBall 5000
+                        (ID.product == 0xc623) || // SpaceTraveler (untested)
+                        (ID.product == 0xc625) || // SpacePilot (untested)
+                        (ID.product == 0xc626) || // SpaceNavigators
+                        (ID.product == 0xc627) || // SpaceExplorer (untested)
+                        (ID.product == 0xc628) || // SpaceNavigator for Notebooks (untested)
+                        (ID.product == 0xc629) || // SpacePilot Pro (untested)
+                        (ID.product == 0xc62b) || // SpaceMousePro
+                        0
+                    )
+                ) ||
+                ((ID.vendor == 0x256F) && // 3Dconnexion's Vendor ID
+                    (
+                        (ID.product == 0xc62E) || // SpaceMouse Wireless (cable) (untested)
+                        (ID.product == 0xc62F) || // SpaceMouse Wireless (receiver) (untested)
+                        (ID.product == 0xc631) || // Spacemouse Wireless (untested)
+                        (ID.product == 0xc632) || // SpacemousePro Wireless (untested)
+                        0
+                    )
+                ))
             {
                 // printf("Using device: %s\n", fname);
                 break;
@@ -116,10 +136,31 @@ int ndof_init_first(NDOF_Device *in_out_dev, void *param)
         // We have SpaceNavigator, use it
         spacenav_fd = fd;
 
-        int N_AXES = 6; // FIXME: shouldn't be hardwired!
-        int N_BUTTONS = 32;
+        unsigned int axes_count = 6; // default to sane values for these devices
+        unsigned int N_BUTTONS = 32;
 
-        in_out_dev->axes_count = N_AXES;
+        unsigned char evtype_mask[(EV_MAX + 7) / 8];
+
+        // Get the actual number of axes for this device.
+        if (ioctl(fd, EVIOCGBIT(EV_REL, sizeof evtype_mask), evtype_mask) >= 0)
+        {
+            printf("getting axis count...\n");
+            axes_count = 0;
+
+            unsigned int index = 0;
+            for (; index < REL_CNT; ++index)
+            {
+                unsigned int idx = index / 8;
+                unsigned int bit = index % 8;
+
+                axes_count += (evtype_mask[idx] & (1 << bit)) > 0;
+            }
+        } else {
+            fprintf( stderr, "%s\n", "ioctl error" );
+        }
+
+
+        in_out_dev->axes_count = axes_count;
         in_out_dev->btn_count  = N_BUTTONS;
         in_out_dev->absolute   = 0;
         in_out_dev->valid      = 1;
@@ -130,7 +171,7 @@ int ndof_init_first(NDOF_Device *in_out_dev, void *param)
         // private data
         LinJoystickPrivate *priv = (LinJoystickPrivate *) malloc (sizeof(LinJoystickPrivate));
         priv->fd = fd;
-        priv->axes = (long int *) calloc(N_AXES, sizeof(long int));
+        priv->axes = (long int *) calloc(axes_count, sizeof(long int));
         priv->buttons = (long int *) calloc(N_BUTTONS, sizeof(long int));
         priv->USE_SDL = 0;
         priv->j = NULL;
