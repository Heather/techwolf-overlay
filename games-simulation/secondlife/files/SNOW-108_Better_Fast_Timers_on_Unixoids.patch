Index: doc/contributions.txt
===================================================================
--- doc/contributions.txt	(revision 2674)
+++ doc/contributions.txt	(working copy)
@@ -486,6 +486,7 @@
 	CT-231
 	CT-321
 Robin Cornelius
+    SNOW-108
 	VWR-2488
 	VWR-9557
 	VWR-11128
Index: indra/llcommon/llfasttimer.h
===================================================================
--- indra/llcommon/llfasttimer.h	(revision 2674)
+++ indra/llcommon/llfasttimer.h	(working copy)
@@ -250,6 +250,7 @@
 	static int sPauseHistory;
 	static int sResetHistory;
 	static F64 sCPUClockFrequency;
+    static U64 sClockResolution;
 	
 private:
 	EFastTimerType mType;
Index: indra/llcommon/llfasttimer.cpp
===================================================================
--- indra/llcommon/llfasttimer.cpp	(revision 2674)
+++ indra/llcommon/llfasttimer.cpp	(working copy)
@@ -66,6 +66,12 @@
 
 F64 LLFastTimer::sCPUClockFrequency = 0.0;
 
+#if LL_LINUX || LL_SOLARIS
+U64 LLFastTimer::sClockResolution = 1e9; // Nanosecond resolution
+#else 
+U64 LLFastTimer::sClockResolution = 1e6; // Microsecond resolution
+#endif
+
 //////////////////////////////////////////////////////////////////////////////
 
 //
@@ -93,17 +99,26 @@
 
 #endif // LL_WINDOWS
 
-
-#if (LL_LINUX || LL_SOLARIS) && (defined(__i386__) || defined(__amd64__))
+#if LL_LINUX || LL_SOLARIS
+// Try to use the MONOTONIC clock if available, this is a constant time counter
+// with nanosecond resolution (but not necessarily accuracy) and attempts are made
+// to synchronize this value between cores at kernel start. It should not be effected
+// by CPU frequency. If not available use the REALTIME clock, but this may be effected by
+// NTP adjustments or other user activity effecting the system time.
 U64 get_cpu_clock_count()
 {
-	U64 x;
-	__asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
-	return x;
+    struct timespec tp;
+
+#ifdef CLOCK_MONOTONIC
+    clock_gettime(CLOCK_MONOTONIC,&tp);
+#else
+    clock_gettime(CLOCK_REALTIME,&tp);
+#endif
+    return (tp.tv_sec*LLFastTimer::sClockResolution)+tp.tv_nsec;        
 }
-#endif
+#endif // (LL_LINUX || LL_SOLARIS))
 
-#if LL_DARWIN || (LL_SOLARIS && defined(__sparc__))
+#if LL_DARWIN
 //
 // Mac implementation of CPU clock
 //
@@ -118,13 +133,13 @@
 //////////////////////////////////////////////////////////////////////////////
 
 //static
-#if LL_LINUX || LL_DARWIN || LL_SOLARIS
+#if LL_DARWIN || LL_LINUX || LL_SOLARIS
 // Both Linux and Mac use gettimeofday for accurate time
 U64 LLFastTimer::countsPerSecond()
 {
-	return 1000000; // microseconds, so 1 Mhz.
+	return sClockResolution; // microseconds, so 1 Mhz.
 }
-#else
+#else 
 U64 LLFastTimer::countsPerSecond()
 {
 	if (!sCPUClockFrequency)
