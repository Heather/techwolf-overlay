--- ./depends/Caelum/SConstruct.org	2010-04-19 05:21:55.000000000 -0400
+++ ./depends/Caelum/SConstruct	2010-04-19 15:05:01.000000000 -0400
@@ -48,8 +48,6 @@
     # Get dependency flags from pkg-config.
     depflags = {
         'ogre': env.ParseFlags('!pkg-config OGRE --cflags --libs'),
-        'ois': env.ParseFlags('!pkg-config OIS --cflags --libs'),
-        'cegui': env.ParseFlags('!pkg-config CEGUI CEGUI-OGRE --cflags --libs'),
     }
 
     # Don't do checks on cleaning.
@@ -65,14 +63,6 @@
         print 'Fatal error: Did not find Ogre library or headers.'
         Exit(1)
 
-    if not conf.CheckCXXHeader('OIS.h'):
-        print 'Warning: Did not find OIS library or headers, demos will be skipped.'
-        depflags['ois'] = None
-
-    if depflags.has_key('ois') and not conf.CheckCXXHeader('CEGUI/CEGUI.h'):
-        print 'Warning: Did not find CEGUI library, CEGUI demos will be skipped.'
-        depflags['cegui'] = None
-
     # Don't replace env
     conf.Finish()
     return depflags
@@ -95,31 +85,6 @@
     ogreEnv.Append(CPPPATH = 'main/include')
     ogreEnv.Library('Caelum', Glob('main/src/*.cpp'))
 
-    # Environment for samples
-    demoEnv = ogreEnv.Clone()
-    demoEnv.AppendUnique(LIBPATH = '.')
-    demoEnv.AppendUnique(LIBS = 'Caelum')
-    demoEnv.AppendUnique(CPPPATH = 'samples/include');
-
-    # OIS-only demos
-    if depflags.has_key('ois'):
-        oisDemoEnv = demoEnv.Clone()
-        oisDemoEnv.AppendUnique(**depflags['ois'])
-    else:
-        oisDemoEnv = null
-
-    # CEGUI-based demos
-    if depflags.has_key('cegui'):
-        ceguiDemoEnv = oisDemoEnv.Clone();
-        ceguiDemoEnv.AppendUnique(**depflags['cegui'])
-
-    if oisDemoEnv:
-        oisDemoEnv.Program('CaelumDemo', 'samples/src/CaelumDemo.cpp')
-    if ceguiDemoEnv:
-        ceguiDemoEnv.Program('CaelumLab', 'samples/src/CaelumLab.cpp')
-    # This is how you add an ogre scratch exe:
-    #demoEnv.Program('CaelumUnitTest', 'samples/src/CaelumUnitTest.cpp')
-
 env = Environment()
 HandleVariables(env)
 depflags = AutoConfigure(env)
