Index: snowglobe-svn/indra/newview/pipeline.cpp
===================================================================
--- snowglobe-svn.orig/indra/newview/pipeline.cpp	2009-08-08 01:04:19.000000000 +0200
+++ snowglobe-svn/indra/newview/pipeline.cpp	2009-08-08 01:14:08.000000000 +0200
@@ -2333,8 +2333,32 @@
 				LLVector3 pos = gAgent.getPosAgentFromGlobal(pos_global);
 				if (gPipeline.sRenderBeacons)
 				{
-					//pos += LLVector3(0.f, 0.f, 0.2f);
-					gObjectList.addDebugBeacon(pos, "", LLColor4(1.f, 1.f, 0.f, 0.5f), LLColor4(1.f, 1.f, 1.f, 0.5f), gSavedSettings.getS32("DebugBeaconLineWidth"));
+					LLAudioChannel* channel = sourcep->getChannel();
+					bool const is_playing = channel && channel->isPlaying();
+					S32 width = 2;
+					LLColor4 color = LLColor4(0.f, 0.f, 1.f, 0.5f);
+					if (is_playing)
+					{
+					  	llassert(!sourcep->isMuted());
+						F32 gain = sourcep->getGain() * channel->getSecondaryGain();
+						if (gain == 0.f)
+						{
+						  color = LLColor4(1.f, 0.f, 0.f, 0.5f);
+						}
+						else if (gain == 1.f)
+						{
+						  color = LLColor4(0.f, 1.f, 0.f, 0.5f);
+						  width = gSavedSettings.getS32("DebugBeaconLineWidth");
+						}
+						else
+						{
+						  color = LLColor4(1.f, 1.f, 0.f, 0.5f);
+						  width = 1 + gain * (gSavedSettings.getS32("DebugBeaconLineWidth") - 1);
+						}
+					}
+					else if (sourcep->isMuted())
+						color = LLColor4(0.f, 1.f, 1.f, 0.5f);
+					gObjectList.addDebugBeacon(pos, "", color, LLColor4(1.f, 1.f, 1.f, 0.5f), width);
 				}
 			}
 			// now deal with highlights for all those seeable sound sources
Index: snowglobe-svn/indra/llaudio/audioengine.h
===================================================================
--- snowglobe-svn.orig/indra/llaudio/audioengine.h	2009-08-08 01:04:19.000000000 +0200
+++ snowglobe-svn/indra/llaudio/audioengine.h	2009-08-08 01:15:48.000000000 +0200
@@ -321,6 +321,7 @@
 	friend class LLAudioChannel;
 protected:
 	void setChannel(LLAudioChannel *channelp);
+public:
 	LLAudioChannel *getChannel() const						{ return mChannelp; }
 
 protected:
@@ -409,17 +410,22 @@
 
 	friend class LLAudioEngine;
 	friend class LLAudioSource;
+
 protected:
 	virtual void play() = 0;
 	virtual void playSynced(LLAudioChannel *channelp) = 0;
 	virtual void cleanup() = 0;
+	void setWaiting(bool waiting)               { mWaiting = waiting; }
+
+public:
 	virtual bool isPlaying() = 0;
-	void setWaiting(const bool waiting)			{ mWaiting = waiting; }
 	bool isWaiting() const						{ return mWaiting; }
 
+protected:
 	virtual bool updateBuffer(); // Check to see if the buffer associated with the source changed, and update if necessary.
 	virtual void update3DPosition() = 0;
 	virtual void updateLoop() = 0; // Update your loop/completion status, for use by queueing/syncing.
+
 protected:
 	LLAudioSource	*mCurrentSourcep;
 	LLAudioBuffer	*mCurrentBufferp;
